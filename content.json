{"meta":{"title":"Sunflower","subtitle":null,"description":null,"author":"Sunflower","url":"http://www.sun4lower.cn"},"pages":[{"title":"About Sunflower","date":"2017-02-19T16:32:02.000Z","updated":"2017-02-19T16:32:02.000Z","comments":true,"path":"about/index.html","permalink":"http://www.sun4lower.cn/about/index.html","excerpt":"","text":"简介／Intro80后程序猿一枚，曾经从事过VR/AR、电商平台等开发工作，现专注于研究和学习Spark技术，希望和志同道合之人交流学习，共同进步！同时，文中出现错误或不妥之处还请提出您宝贵的意见！ 联系方式／ContactQQ：1054844760 邮箱：sun4lower@163.com GitHub：sun4lower Stack-overflow：suflower 捐助／Donate如果觉得本站的文章对您有所帮助，可以通过一下方式捐助： 支付宝： 微信： QQ： 说明站内博客未经特殊说明皆为原创，欢迎转载，转载请注明出处、作者，谢谢！"},{"title":"Tags","date":"2017-02-20T02:45:39.000Z","updated":"2017-02-20T02:47:10.000Z","comments":false,"path":"tags/index.html","permalink":"http://www.sun4lower.cn/tags/index.html","excerpt":"","text":""},{"title":"Categories","date":"2017-02-20T01:51:26.000Z","updated":"2017-02-20T02:47:27.000Z","comments":false,"path":"categories/index.html","permalink":"http://www.sun4lower.cn/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"浅显易懂之线程模型的演变","slug":"event-threadmodel","date":"2017-02-22T09:49:24.000Z","updated":"2017-02-22T12:39:47.000Z","comments":true,"path":"2017/02/22/event-threadmodel/","link":"","permalink":"http://www.sun4lower.cn/2017/02/22/event-threadmodel/","excerpt":"","text":"本文旨在通过一个实际工作中例子让大家理解线程模型的演变，从而对 Netty 的模型有一个粗略的印象，面向的是想初步了解 Netty 原理的读者，而并不关心具体的执行细节和相关术语的描述。 单线程单线程映射到我们的实际工作中就是由一个人完成所有的工作，如下图所示： A 自己独立的完成全部的Job 多线程多线程映射到我们的工作中就是多个人共同协作完成工作，如下图所示： A、B、C 三人工作完成工作，每个人会分到具体的工作去执行，较之单线程，执行效率提高。 线程池多个 Worker（A、B、C等）已经准备好去完成即将到来的Job，当Job 1过来的时候，会从线程池中选择一个线程也就是Worker（A）来完成这项任务，完成之后A仍然要回到线程池中，等待下一个工作的到来。 Reactor单线程模型Reactor 的单线程模型映射到实际工作中如下图所示： 我们有一个Boss来接收具体的Job，然后Boss将具体接收到的Job分配给已经准备好的Worker，交给具体的Worker来完成最终的Job，但是如果Job非常多的时候，Boss的压力就会越来越大，所以Boss成为了性能的瓶颈，而下面提到的Reactor多线程模型就是为了解决这个问题而产生的。 Reactor多线程模型为了完善Reactor单线程模型，Reactor多线程模型进行了优化： 和Reacotr单线程模型相比，Reactor多线程模型增加了一个从Manager pool选择Manager的过程，即通过Manager来帮助Boss分配具体的Job给Worker Netty的具体实现就类似于Reactor的多线程模型，而Spark现在Rpc的底层就是通过Netty来实现的。 至此本文的目的已经达到，如果想要更加详细的了解Netty的具体实现细节和NIO相关的知识可以参考如下文章： Netty系列之Netty线程模型 并发编程网有关Netty的部分 Netty官方网站 Java NIO Tutorial 站内博客未经特殊说明皆为原创，欢迎转载，转载请注明出处、作者，谢谢！","categories":[{"name":"大数据","slug":"bigdata","permalink":"http://www.sun4lower.cn/categories/bigdata/"},{"name":"通信机制","slug":"bigdata/event","permalink":"http://www.sun4lower.cn/categories/bigdata/event/"}],"tags":[{"name":"通信机制","slug":"event","permalink":"http://www.sun4lower.cn/tags/event/"},{"name":"Netty","slug":"netty","permalink":"http://www.sun4lower.cn/tags/netty/"},{"name":"多线程","slug":"多线程","permalink":"http://www.sun4lower.cn/tags/多线程/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-02-19T04:52:30.000Z","updated":"2017-02-20T03:19:14.000Z","comments":true,"path":"2017/02/19/hello-world/","link":"","permalink":"http://www.sun4lower.cn/2017/02/19/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server 123public static void main(String[] args)&#123; System.out.print(\"hello world\")&#125; 12def sum(a: Int, b: Int): Int = a + bprintln(\"hello world\") More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment hello world","categories":[{"name":"大数据","slug":"bigdata","permalink":"http://www.sun4lower.cn/categories/bigdata/"},{"name":"spark","slug":"bigdata/spark","permalink":"http://www.sun4lower.cn/categories/bigdata/spark/"},{"name":"spark-core","slug":"bigdata/spark/sparkc","permalink":"http://www.sun4lower.cn/categories/bigdata/spark/sparkc/"}],"tags":[{"name":"大数据","slug":"bigdata","permalink":"http://www.sun4lower.cn/tags/bigdata/"},{"name":"性能调优","slug":"perf","permalink":"http://www.sun4lower.cn/tags/perf/"},{"name":"spark-core","slug":"sparkc","permalink":"http://www.sun4lower.cn/tags/sparkc/"}]}]}